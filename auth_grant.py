# -*- coding: utf-8 -*-
"""Auth grant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Py-4y9i-yRJ0Bi11hZ54xK5mWjOtYaun
"""

import requests
from urllib.parse import urlencode
import secrets

# LinkedIn API credentials
CLIENT_ID = '776qzr0qhmlt23'
CLIENT_SECRET = 'bNX1V477dRwkDEfq'
REDIRECT_URI = 'http://localhost:8000'  # Redirect URI specified in your LinkedIn app settings
SCOPE = 'r_liteprofile r_emailaddress'  # Specify the scopes required for your application

# Step 1: Get Authorization Code (Initiating OAuth Flow)
def get_authorization_code():
    auth_url = 'https://www.linkedin.com/oauth/v2/authorization'
    state = secrets.token_urlsafe(16)  # Generate a 16-byte random string for state

    params = {
        'response_type': 'code',
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': SCOPE,
        'state': state
    }
    auth_request_url = f"{auth_url}?{urlencode(params)}"

    print(f"Open the following URL in your browser and grant permission:")
    print(auth_request_url)
    print("After granting permission, you will be redirected to the provided Redirect URI.")
    print("Copy the authorization code from the redirected URL.")

    # Retrieve the authorization code from the redirected URL
    authorization_code = input("Enter authorization code from redirected URL: ")
    return authorization_code

# Step 2: Exchange Authorization Code for Access Token
def get_access_token(authorization_code):
    token_url = 'https://www.linkedin.com/oauth/v2/accessToken'
    data = {
        'grant_type': 'authorization_code',
        'code': authorization_code,
        'redirect_uri': REDIRECT_URI,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET
    }
    response = requests.post(token_url, data=data)

    if response.status_code == 200:
        access_token = response.json().get('access_token')
        return access_token
    else:
        print("Failed to retrieve access token")
        return None

# Main execution to obtain authorization code and access token
if __name__ == "__main__":
    authorization_code = get_authorization_code()
    if authorization_code:
        access_token = get_access_token(authorization_code)
        if access_token:
            print(f"Access Token: {access_token}")